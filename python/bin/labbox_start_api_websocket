#!/usr/bin/env python3

import os
import sys
thisdir = os.path.dirname(os.path.realpath(__file__))

# # this is how the python functions in the extensions get registered
labbox_extensions_dir = os.environ['LABBOX_EXTENSIONS_DIR']
sys.path.insert(0, f'{labbox_extensions_dir}/..')
import extensions
extensions # just keep the linter happy - we only need to import extensions to register the hither functions
# remove the prepended path so we don't have side-effects
sys.path.remove(f'{labbox_extensions_dir}/..')

import random
import asyncio
import json
import sys
import time
import traceback
import urllib3
import yaml

import hither2 as hi2
import kachery_p2p as kp
import websockets
from labbox.api import Session

def main():
    config_path_or_url = os.environ.get('LABBOX_CONFIG', None)
    if config_path_or_url is None:
        default_config_path = f'{thisdir}/../../labbox_config.yml'
        if os.path.exists(default_config_path):
            config_path_or_url = default_config_path
    print(f"LABBOX_CONFIG: {config_path_or_url}")
    if config_path_or_url:
        labbox_config = load_config(config_path_or_url)
    else:
        labbox_config = {
            'compute_resource_uri': '',
            'job_handlers': {
                'local': {
                    'type': 'local'
                },
                'partition1': {
                    'type': 'local'
                },
                'partition2': {
                    'type': 'local'
                },
                'partition3': {
                    'type': 'local'
                },
                'timeseries': {
                    'type': 'local'
                }
            },
            'nodes_with_access': [
            ]
        }

    print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
    print(json.dumps(labbox_config, indent=4))
    print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')

    nodes_with_access = labbox_config.get('nodes_with_access', [])
    while True:
        try:
            node_id = kp.get_node_id()
            break
        except:
            print('Unable to connect to daemon. Perhaps daemon is not running yet. Trying again in a few seconds.')
            time.sleep(5)

    async def incoming_message_handler(session, websocket):
        async for message in websocket:
            msg = json.loads(message)
            session.handle_message(msg)

    async def outgoing_message_handler(session, websocket):
        while True:
            try:
                hi2.wait(0)
            except:
                traceback.print_exc()
            messages = session.check_for_outgoing_messages()
            if len(messages) > 0:
                await websocket.send(json.dumps(messages))
            if session.elapsed_sec_since_incoming_keepalive() > 60:
                print('Closing session')
                return
            await asyncio.sleep(0.05)

    # Thanks: https://websockets.readthedocs.io/en/stable/intro.html
    async def connection_handler(websocket, path):
        session = Session(
            labbox_config=labbox_config,
            default_feed_name=os.environ['LABBOX_DEFAULT_FEED_NAME']
        )
        task1 = asyncio.ensure_future(
            incoming_message_handler(session, websocket))
        task2 = asyncio.ensure_future(
            outgoing_message_handler(session, websocket))
        done, pending = await asyncio.wait(
            [task1, task2],
            return_when=asyncio.FIRST_COMPLETED,
        )
        print('Connection closed.')
        session.cleanup()
        for task in pending:
            task.cancel()

    listen_port = int(os.environ['LABBOX_WEBSOCKET_PORT'])
    start_server = websockets.serve(connection_handler, '0.0.0.0', listen_port)

    asyncio.get_event_loop().run_until_complete(start_server)
    print(f'Listening for websocket connections on port {listen_port}')
    asyncio.get_event_loop().run_forever()

def cache_bust(url):
    r = random_string(8)
    if '?' in url:
        return url + '&' + r
    else:
        return url + '?' + r

def random_string(num_chars: int) -> str:
    chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
    return ''.join(random.choice(chars) for _ in range(num_chars))

def load_config(config_path_or_url):
    if config_path_or_url.startswith('http://') or config_path_or_url.startswith('https://'):
        http = urllib3.PoolManager()
        x = http.request('GET', cache_bust(config_path_or_url)).data
        return yaml.safe_load(x)
    else:
        with open(config_path_or_url) as f:
            x = f.read()
            return yaml.safe_load(x)

if __name__ == '__main__':
    main()
